// SVG characteristics
.svg {
  display: block;
  height: 100%;
  width: 100%;
  border: 1px solid #777777;
  margin-bottom: 15px;
  padding-right: 0 !important;
  padding-left: 0 !important;
  @media screen and (min-width: $on-large) {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }
}
.full-page-content > .wrapper > .svg {
  max-height: 100vh;
  border: 0px;
  margin-bottom: 0;
}

.page-content {
  padding: 0;
  flex: 1 0 auto;
}


// default wrapper, directly from minima's code:
// auto margins, spacing/2 of padding
// width does not include padding, border, or margin
/*
.wrapper {
  max-width: calc(#{$content-width} - (#{$spacing-unit}));
  margin-right: auto;
  margin-left: auto;
  padding-right: $spacing-unit / 2;
  padding-left: $spacing-unit / 2;
  @extend %clearfix;

  @media screen and (min-width: $on-large) {
    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));
    padding-right: $spacing-unit;
    padding-left: $spacing-unit;
  }
}
*/

// mod the wrapper to only provide the edge's safety padding
.page-content > .wrapper,
.full-page-content > .wrapper {
  max-width: 100%;
  margin-right: 0;
  margin-left: 0;
  padding-right: 0;
  padding-left: 0;

  @media screen and (min-width: $on-large) {
    max-width: 100%;
    padding-right: 0;
    padding-left: 0;
  }
}

// modify all content elements to be $content-width
.wrapper > .home,
.wrapper > .post > .post-header,
.wrapper > .post > .post-content > * {
  max-width: calc(#{$content-width} - (#{$spacing-unit}));
  margin-right: auto;
  margin-left: auto;
  padding-right: $spacing-unit / 2;
  padding-left: $spacing-unit / 2;

  @media screen and (min-width: $on-large) {
    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));
    padding-right: $spacing-unit;
    padding-left: $spacing-unit;
  }
}

// exempt .wide things and give them $content-width-extrawide instead
.wrapper > .post > .post-content > .wide {
  max-width: calc(#{$content-width-extrawide} - (#{$spacing-unit}));
  @media screen and (min-width: $on-large) {
    max-width: calc(#{$content-width-extrawide} - (#{$spacing-unit} * 2));
  }
}

// special case for full-screen pages
.wrapper > .wide {
  max-width: 100%;
  @media screen and (min-width: $on-large) {
    max-width: 100%;
  }
}

.wrapper > .post > .post-content > ul,
.wrapper > .post > .post-content > ol {
  list-style-position: inside;
  padding-left: calc(#{$spacing-unit} / 2 + 15px);

  @media screen and (min-width: $on-large) {
    padding-left: calc(#{$spacing-unit} + 15px);
  }
}

.taglist {
  margin-left: auto;
}

.taglink {
  font-size: 14px;
  background-color: $code-background-color;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-left: 4px;
  padding-right: 4px;
  border-radius: 3px;
}

.hidden-group {
  display: none;
}
